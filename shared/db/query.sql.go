// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBusinessAccount = `-- name: CreateBusinessAccount :exec
INSERT INTO "business_accounts" ("name", "site_identifier") VALUES ($1, $2) RETURNING "id"
`

type CreateBusinessAccountParams struct {
	Name           string
	SiteIdentifier string
}

func (q *Queries) CreateBusinessAccount(ctx context.Context, arg CreateBusinessAccountParams) error {
	_, err := q.db.Exec(ctx, createBusinessAccount, arg.Name, arg.SiteIdentifier)
	return err
}

const getBusinessAccount = `-- name: GetBusinessAccount :one
SELECT id, name, site_identifier FROM "business_accounts" where "id" = $1 LIMIT 1
`

func (q *Queries) GetBusinessAccount(ctx context.Context, id pgtype.UUID) (BusinessAccount, error) {
	row := q.db.QueryRow(ctx, getBusinessAccount, id)
	var i BusinessAccount
	err := row.Scan(&i.ID, &i.Name, &i.SiteIdentifier)
	return i, err
}

const listBusinessAccounts = `-- name: ListBusinessAccounts :many
SELECT id, name, site_identifier FROM "business_accounts" ORDER BY "name" LIMIT $1 OFFSET $2
`

type ListBusinessAccountsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListBusinessAccounts(ctx context.Context, arg ListBusinessAccountsParams) ([]BusinessAccount, error) {
	rows, err := q.db.Query(ctx, listBusinessAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BusinessAccount
	for rows.Next() {
		var i BusinessAccount
		if err := rows.Scan(&i.ID, &i.Name, &i.SiteIdentifier); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
